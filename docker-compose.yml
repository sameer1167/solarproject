version: '3.8'        

services:                     #Defines multiple Docker containers (services) that work together.
  web:
    build: .                    #build: . → Builds the Docker image using the Dockerfile in the current directory (.).
    container_name: SolarApp    #container_name: django_app → Names the container django_app instead of using a random name.we can use different also

    restart: always               #restart: always → Ensures the Django container automatically restarts if it crashes or the system reboots.

    # depends_on:       #	depends_on: - db → Ensures the MySQL container (db) starts before Django (web). #  Note: It does NOT wait for MySQL to be “ready,” just ensures it starts first.
    #   - db
    ports:                      #Maps port 8000 of the container to port 8000 on the host machine.
      - "8000:8000"
    # env_file:         #Loads environment variables from a .env file (e.g., DB_NAME, DB_USER, DB_PASSWORD).
    #   - .env
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    volumes:            #Mounts the project folder (.) to /app inside the container. #	Any changes in the local files are reflected inside the container.
      - .:/SolarApp
    command: >                                              # sh -c → Runs multiple commands in a shell. this  && means step wise command will run                
      sh -c "python manage.py makemigrations && python manage.py migrate &&   
             python manage.py runserver 0.0.0.0:8000"             

  # db:
  #   image: mysql:8.0
  #   container_name: mysql_db
  #   restart: always
  #   env_file:                     #Loads environment variables from a .env file (e.g., DB_NAME, DB_USER, DB_PASSWORD).
  #     - .env
  #   environment:
  #     MYSQL_DATABASE: ${DB_NAME}
  #     MYSQL_USER: ${DB_USER}
  #     MYSQL_PASSWORD: ${DB_PASSWORD}
  #     # MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #   # ports:
  #   #   - "3306:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql

volumes:              #Persistent Storage (volumes:)    Creates a named volume (mysql_data) for storing MySQL data permanently.
  mysql_data: